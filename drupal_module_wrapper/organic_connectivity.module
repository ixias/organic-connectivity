<?php

$GLOBALS['attribs']=array();
//$GLOBALS['attributes_total_uses']=0;
$GLOBALS['subjects']=array();
$GLOBALS['subjects_total_uses']=0;
$GLOBALS['types']=array();
$GLOBALS['types_total_uses']=0;

$GLOBALS['request_tree']=explode("/",$_SERVER['REQUEST_URI']);
array_shift($GLOBALS['request_tree']);

include_once('/homepages/21/d93015512/htdocs/library/organic_connectivity/io.php');

$GLOBALS['ATTRIBUTE_PROTOTYPE_VAR']=variable_get('organic_connectivity_attribute_prototype','');
$GLOBALS['TYPE_PROTOTYPE_VAR']=variable_get('organic_connectivity_prototype_prototype','');
$GLOBALS['SUBJECT_PROTOTYPE_VAR']=variable_get('organic_connectivity_context_prototype','');

function organic_connectivity_super_user_access(){
    global $user;
    if($user->uid=='1') return TRUE;
    return FALSE;
}
function organic_connectivity_user_access(){
    global $user;
    if(in_array('authenticated user',$user->roles)) return TRUE;
    return FALSE;
}
function organic_connectivity_edit_access(){
    global $user;
    if($user->uid!='0') return TRUE;
    return FALSE;
}
function organic_connectivity_check_item_access(){
    if($restricted_to=variable_get('organic_context_items_restrict_to_users','')){
        $restricted_to=explode(',',$restricted_to);
        global $user;
        if(isset($user->name)&&in_array($user->name,$restricted_to)) return TRUE;
        if(isset($user->name)&&in_array('[creator]',$restricted_to)) return TRUE;
        return FALSE;
    }
    return TRUE;
}
function organic_connectivity_check_category_access(){
    if($restricted_to=variable_get('organic_context_categories_restrict_to_users','')){
        $restricted_to=explode(',',$restricted_to);
        global $user;
        if(isset($user->name)&&in_array($user->name,$restricted_to)) return TRUE;
        if(isset($user->name)&&in_array('[creator]',$restricted_to)) return TRUE;
        return FALSE;
    }
    return TRUE;
}

function organic_connectivity_output_plain($data_from_theme_template){
    //// A wrapper function to use Drupal to output plain JSON feeds
    //header('Content-Type:text/xml');
    drupal_add_http_header('Content-Type','text/xml');
    drupal_add_http_header('Charset','utf-8');
    echo($data_from_theme_template);
}

function organic_connectivity_menu(){
    return array(
        'connectivity'=>array(
            'title'=>'Connectivity',
            'description'=>'Introduction',
            'page callback'=>'organic_connectivity_intro',
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'connectivity/config'=>array(
            'title'=>'Config',
            'description'=>'Configurable variables for OrganicConnectivity',
            'page callback'=>'drupal_get_form',
            'page arguments'=>array('organic_connectivity_config_page',),
            'access callback'=>'organic_connectivity_super_user_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/overview'=>array(
            'title'=>'Overview',
            'description'=>'Your node cataloging data overview',
            'page callback'=>'theme',
            'page arguments'=>array('overview',),
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers'=>array(
            'title'=>'Viewers',
            'description'=>'Your node cataloging viewers',
            'page callback'=>'theme',
            'page arguments'=>array('overview',),
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/partition'=>array(
            'title'=>'Partition',
            'description'=>'Your node cataloging partition view',
            'page callback'=>'theme',
            'page arguments'=>array('partition',),
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/cloud'=>array(
            'title'=>'Cloud',
            'description'=>'Clump of categories sized by children',
            'page callback'=>'theme',
            'page arguments'=>array('cloud'),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/flat'=>array(
            'title'=>'Boards',
            'description'=>'Block list viewer of Categories w/a few random children',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'ordering'=>'created',
                    'perpage'=>250,
                    'by_type'=>variable_get('organic_connectivity_context_prototype',''),
                    'show_contexts'=>1,//0=no,1=yes
                    'show_random_child'=>3,
                    'show_children'=>TRUE,
                    'show_multi_image'=>FALSE,
                    'show_date'=>FALSE,
                    'show_outer_contexts'=>FALSE,
                )
            ),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/tree'=>array(
            'title'=>'Tree',
            'description'=>'Nestings__Embedded topic viewer__Nested tree listing of categories (setlists)',
            'page callback'=>'theme',
            'page arguments'=>array('tree'),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/serpent'=>array(
            'title'=>'Serpent',
            'description'=>'Sankey diagram',
            'page callback'=>'theme',
            'page arguments'=>array('serpent'),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/neuron'=>array(
            'title'=>'Neuron',
            'description'=>'Force-directed Context Graph',
            'page callback'=>'theme',
            'page arguments'=>array('neuron'),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/viewers/sunburst'=>array(
            'title'=>'Sunburst',
            'description'=>'Connected Sunburst Context Graph',
            'page callback'=>'theme',
            'page arguments'=>array('sunburst'),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/sort-by'=>array(
            'title'=>'Sorting',
            'description'=>'Connectivity sorting options',
            'page callback'=>'organic_gallery_sorting',
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'connectivity/sort-by/users'=>array(
            'title'=>'by User',
            'description'=>'Setlists Broken by Creators',
            'page callback'=>'theme',
            'page arguments'=>array(
                'cloud',array(
                    'break_by_user'=>TRUE,
                    'show_displays'=>FALSE,
                    'show_sorting'=>FALSE,
                )
            ),
            'access callback'=>'organic_connectivity_super_user_access',
            'menu_name'=>'main-menu',
        ),
        /*'connectivity/feeds'=>array(
            'title'=>'ViewerFeeds',
            'description'=>'Your node cataloging viewerFeeds',
            'page callback'=>'organic_connectivity_intro',
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),*/
        'connectivity/feeds/json_contexts_hierarchical'=>array(
            'title'=>'JSON_Contexts_Hierarchical',
            'description'=>'JSON feed for Force-directed Context Graph',
            'page callback'=>'organic_connectivity_json_hierarchical',
            'delivery callback'=>'drupal_json_output',
            'access callback'=>'organic_connectivity_check_category_access',
        ),
        'connectivity/feeds/json_ForceDirected_d3'=>array(
            'title'=>'JSON_ForceDirected_for_d3',
            'description'=>'JSON feed for Force-directed Context Graph for d3',
            'page callback'=>'organic_connectivity_json_ForceDirected',
            'delivery callback'=>'drupal_json_output',
            'access callback'=>'organic_connectivity_check_category_access',
        ),
        'connectivity/feeds/json_Sunburst'=>array(
            'title'=>'JSON_Sunburst',
            'description'=>'JSON feed for Connected Sunburst Context Graph',
            'page callback'=>'organic_connectivity_json_Sunburst',
            'delivery callback'=>'drupal_json_output',
            'access callback'=>'organic_connectivity_check_category_access',
        ),
        'connectivity/feeds/json_Sunburst_flat'=>array(
            'title'=>'JSON_Sunburst_flat',
            'description'=>'JSON feed for Connected Sunburst Context Graph',
            'page callback'=>'organic_connectivity_json_Sunburst_flat',
            'delivery callback'=>'drupal_json_output',
            'access callback'=>'organic_connectivity_check_category_access',
        ),
        'connectivity/feeds/json_sunburst_d3'=>array(
            'title'=>'JSON_Sunburst__expandable',
            'description'=>'JSON feed for Connected Sunburst Context Graph',
            'page callback'=>'organic_connectivity_json_sunburst_d3',
            'delivery callback'=>'drupal_json_output',
            'access callback'=>'organic_connectivity_check_category_access',
        ),
        'connectivity/attributes' => array(
            'title'=>'Attributes',
            'description'=>'Nodes that define, a prototype for connectivity',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'by_type'=>variable_get('organic_connectivity_attribute_prototype',''),
                    'image_size'=>'medium',
                    'show_multi_image'=>FALSE,
                    'mine_children'=>TRUE,
                    'show_sorting'=>FALSE,
                    'show_displays'=>FALSE,
                    'show_outer_contexts'=>TRUE,
                )
            ),
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',

        ),
        'connectivity/attributes/subjects'=>array(
            'title'=>'Subjects',
            'description'=>'Organic topic categorization viewers',
            'page callback'=>'node_page_view',
            'page arguments'=>array(node_load(variable_get('organic_connectivity_context_prototype',''))),
            'access callback'=>'organic_connectivity_check_category_access',
            'menu_name'=>'main-menu',
        ),
        'connectivity/attributes/prototype'=>array(
            'title'=>'Prototypes',
            'description'=>'...',
            'page callback'=>'theme',
            'page arguments'=>array('prototypes'),
            'access callback' => TRUE,
            'menu_name' => 'main-menu',
        ),
        'connectivity/attributes/prototype/journal'=>array(
            'title'=>'Journal',
            'description'=>'Journal entries via JOURNAL prototype',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'by_type'=>variable_get('organic_connectivity_journal_prototype',''),
                    'ordering'=>'created',
                    'perpage'=>100,
                    'show_pagination'=>TRUE,
                    'show_toolbar'=>TRUE,
                    'show_contexts'=>0,
                    'show_outer_contexts'=>TRUE,
                    'show_random_child'=>FALSE,
                    'show_children'=>FALSE,
                    'break_by_contexts'=>FALSE,
                    'show_date'=>'Y-m-d',
                    'show_heading'=>TRUE,
                )
            ),
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'search'=>array(
            'title'=>'Search',
            'description'=>'Keyword search',
            'menu_name'=>'main-menu',
        ),
/*        'node/add/thing'=>array(
            'page callback'=>'organic_connectivity_build_form',
            'access callback'=>'organic_connectivity_super_user_access',
        ),*/
/*        'node/%/edit'=>array(
            'page callback'=>'organic_connectivity_build_form',
            'access callback'=>'organic_connectivity_super_user_access',
        ),*/
        'items'=>array(
            'title'=>'Items',
            'description'=>'...',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'blocks',
                    'ordering'=>'created',
                    'show_contexts'=>1,
                )
            ),
            'access callback'=>'organic_connectivity_check_item_access',
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'items/blocks'=>array(
            'title'=>'Blocks',
            'description'=>'A sortable and display-morphable list of items',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'blocks',
                    'ordering'=>'created',
                    'show_contexts'=>1,
                )
            ),
            'access callback'=>'organic_connectivity_check_item_access',
            'menu_name'=>'main-menu',
        ),
        'items/rotator'=>array(
            'title'=>'Cinema',
            'description'=>'A listing of items suitable for rotation',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'cinema',
                    'by_context'=>NULL,
                    'by_type'=>NULL,
                    'ordering'=>'created',
                    'show_contexts'=>0,//0=no,1=yes,2=only
                    'show_unpublished'=>0,//0=no,1=yes,2=only
                    'perpage'=>30,
                    'show_pagination'=>TRUE,
                    'cinema_size'=>'large-landscape-or-portrait',
                    'cinema_size_thumb'=>'thumbnail',
                )
            ),
            'access callback'=>'organic_connectivity_check_item_access',
            'menu_name'=>'main-menu',
        ),
        'items/global'=>array(
            'title'=>'Worldmap',
            'description'=>'A listing of items suitable for global mapping',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'mapped',
                    'by_context'=>NULL,
                    'ordering'=>'created',
                    'show_contexts'=>0,//0=no,1=yes,2=only
                    'perpage'=>50,
                    'show_pagination'=>TRUE,
                    'show_toolbar'=>TRUE,
                    'image_size'=>'large-landscape-or-portrait',
                    'image_size_sub'=>'thumbnail',
                )
            ),
            'access callback' => 'organic_connectivity_check_item_access',
            'menu_name' => 'main-menu',
        ),
        'items/table'=>array(
            'title'=>'Table',
            'description'=>'Tabular nodal data',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'tabular',
                    'perpage'=>150,
                    'show_contexts'=>1,//0=no,1=yes,2=only
                    'show_outer_contexts'=>FALSE,
            )),
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'items/full_nodes'=>array(
            'title'=>'Nodes',
            'description'=>'A listing of items via Drupal\'s default content node template(?)',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'nodes',
                    'perpage'=>20,
            )),
            'access callback'=>'organic_connectivity_check_item_access',
            'menu_name'=>'main-menu',
        ),
        'items/sort-by'=>array(
            'title'=>'Sorting',
            'description'=>'Item sorting options',
            'page callback'=>'organic_gallery_sorting',
            'access callback'=>TRUE,
            'menu_name'=>'main-menu',
        ),
        'items/sort-by/weight'=>array(
            'title'=>'Featured',
            'description'=>'A list of most weighted items via blocks',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'blocks',
                    'ordering'=>'weight',
                    'perpage'=>100,
                    'show_contexts'=>1,
                    'show_pagination'=>TRUE,
                    'show_toolbar'=>TRUE,
                )
            ),
            'access callback'=>'organic_connectivity_check_item_access',
            'menu_name'=>'main-menu',
        ),
        'items/sort-by/random'=>array(
            'title'=>'Random',
            'description' => 'A list of random items via blocks',
            'page callback' => 'theme',
            'page arguments' => array(
                'items',array(
                    'viewer'=>'blocks',
                    'ordering'=>'rand',
                    'perpage'=>25,
                    'show_multi_image'=>FALSE,
                    'show_children'=>FALSE,
                    'show_pagination'=>FALSE,
                    'show_toolbar'=>FALSE,
                )
            ),
            'access callback' => 'organic_connectivity_check_item_access',
            'menu_name' => 'main-menu',
        ),
        'items/sort-by/unpublished'=>array(
            'title'=>'Unpublished',
            'description'=>'Nodes with status set to zero',
            'page callback'=>'theme',
            'page arguments'=>array(
                'items',array(
                    'viewer'=>'tabular',
                    'show_unpublished'=>2,
                    'show_pagination'=>TRUE,
                )
            ),
            'access callback'=>'organic_connectivity_super_user_access',
            'menu_name'=>'main-menu',
        ),
        'syndicate'=>array(
            'title'=>'Syndicate',
            'description'=>'An RSS feed of recent content items',
            'page callback'=>'theme',
            'page arguments'=>array('syndication'),
            'delivery callback'=>'organic_connectivity_output_plain',
            'access callback'=>'organic_connectivity_check_item_access',
            'menu_name'=>'main-menu',
        ),
        'http://validator.w3.org/check?uri=referer'=>array(
            'title'=>'HTML',
            'description'=>'Check HTML Structure',
            'menu_name'=>'main-menu',
        ),
        'http://jigsaw.w3.org/css-validator/check/referer'=>array(
            'title'=>'CSS',
            'description'=>'Check CSS Structure',
            'menu_name'=>'main-menu',
        ),
        'http://drupal.org'=>array(
            'title'=>'Drupal',
            'description'=>'Powered by Drupal CMS',
            'menu_name'=>'main-menu',
        ),
    );
}




function organic_connectivity_theme(){
    return array(
        'heading_title'=>array(
            'template'=>'heading_title',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'node'=>NULL,
                'show_nid'=>FALSE,
                'show_context_prototype'=>FALSE,
                'show_prototype_prototype'=>FALSE,
                'show_context_context'=>FALSE,
            ),
        ),
        'parent_context_navigation'=>array(
            'template'=>'parent_context_navigation',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'context_children_image_style'=>'medium',
                'showChildren'=>10,
            ),
        ),
        'context_layer'=>array(
            'template'=>'viewer_tree_layer',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'context'=>NULL,
                'image_style'=>NULL,
                'mine_children'=>FALSE,
                'show_random_child'=>NULL,
                'show_displays'=>TRUE,
                'parent'=>NULL,
                'show_nid'=>FALSE,
                'break_by_user'=>FALSE,
            ),
        ),
        'prototypes'=>array(
            'template'=>'prototypes',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'image_style'=>'thumbnail',
                'mine_children'=>TRUE,
                'show_random_child'=>TRUE,
                'show_nid'=>TRUE,
                'type'=>variable_get('organic_connectivity_prototype_prototype',''),
                'parent'=>variable_get('organic_connectivity_prototype_prototype',''),
            ),
        ),
        'overview'=>array(
            'template'=>'overview',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(),
        ),
        'attributes_of_node'=>array(
            'template'=>'attributes_of_node',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'node'=>NULL,
            ),
        ),
        'attribute_of_nodes'=>array(
            'template'=>'attribute_of_nodes',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'attribute'=>NULL,
            ),
        ),
        'cloud'=>array(
            'template'=>'viewer_cloud',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'context'=>NULL,
                'image_style'=>'thumbnail',
                'mine_children'=>TRUE,
                'show_random_child'=>FALSE,
                'show_displays'=>TRUE,
                'show_sorting'=>TRUE,
                'parent'=>FALSE,
                'show_nid'=>FALSE,
                'break_by_user'=>FALSE,
            ),
        ),
        'tree'=>array(
            'template'=>'viewer_tree',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
        ),
        'serpent'=>array(
            'template'=>'viewer_serpent',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
        ),
        'neuron'=>array(
            'template'=>'viewer_neuron',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
        ),
        'sunburst'=>array(
            'template'=>'viewer_sunburst',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
        ),
        'items'=>array(
            'template'=>'items',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'viewer'=>'blocks',
                'by_type'=>NULL,
                'by_context'=>NULL,
                'by_attribute'=>NULL,
                'perpage'=>50,
                'show_multi_image'=>TRUE,
                'image_size'=>'medium',
                'image_size_sub'=>'thumbnail',
                'cinema_size'=>'large-landscape-or-portrait',
                'cinema_size_thumb'=>'thumbnail',
                'ordering'=>'created',
                'show_pagination'=>TRUE,
                'show_toolbar'=>TRUE,
                'show_contexts'=>0,//0=no,1=yes,2=only
                'show_unpublished'=>0,//0=no,1=yes,2=only
                'show_outer_contexts'=>TRUE,
                'show_random_child'=>FALSE,
                'show_children'=>FALSE,
                'break_by_contexts'=>FALSE,
                'show_date'=>'Y',
                'show_heading'=>TRUE,
            ),
        ),
        'syndication'=>array(
            'template'=>'syndicate',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables'=>array(
                'by_context'=>NULL,
                'perpage'=>25,
                'ordering'=>'created',
                'image_size'=>'medium',
                'show_contexts'=>0,//0=no,1=yes,2=only
                'show_unpublished'=>0,//0=no,1=yes,2=only
            ),
        ),
        'pagination'=>array(
            'template'=>'pagination',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables' => array(
                'item_count'=>NULL,
                'page'=>NULL,
                'perpage'=>NULL,
            ),
        ),
        'items_toolbar'=>array(
            'template'=>'items_toolbar',
            'path'=>drupal_get_path('module','organic_connectivity').'/lib',
            'variables' => array(
                'item_count'=>NULL,
                'page'=>NULL,
                'perpage'=>NULL,
            ),
        ),
    );
}





function organic_connectivity_preprocess(&$variables,$hook){

    #echo('hi '.$hook.'<div style="width:100px;height:100px;background:orange;">&nbsp;</div>');

    global $nd;
    if(empty($nd)&&arg(0)=='node'&&is_numeric(arg(1))){
        #echo("You have loaded node via: ".$hook.' hook<br/>');
        $nd=node_load(arg(1));
        $nd->connections=organic_connectivity_extract_connections($nd->field_context,NULL);
    }

    if($hook=='overview'){
    }

    if($hook=='viewer_toolbar_attribute_chooser'||
       $hook=='attributes_of_node'||
       $hook=='attribute_of_nodes'){

        global $attribs;
        //global $attributes_total_uses;

        if(empty($attribs)){
            $attribs=organic_prototype_obtain_entities_by_connection(
                variable_get('organic_connectivity_attribute_prototype',''),
                'prototypical',
                TRUE
            );
            foreach($attribs as $aid=>$attribute){
                $attribs[$aid]->connections=
                    organic_connectivity_extract_connections($attribute->field_context);
                $attribs[$aid]->uses=organic_prototype_obtain_entities_by_connection($attribute->nid,'prototypical',FALSE);
                //$attributes_total_uses+=count($attribs[$aid]->uses);

            }
        }
    }

    //// END ATTRIBUTE HOOKS




    /// BEGIN TYPE HOOKS

    if($hook=='itemlist_outer_prototypes_needs_you'||
       $hook=='heading_title'||
       $hook=='prototypes'||
       $hook=='json_contexts'||
       $hook=='attributes_of_node'||
       $hook=='node'){

        //Defining the howness of nodal connections

        global $types;
        global $types_total_uses;

        /// Get children recursively based on prototype prototype (class) nid [set on configuration page]

        if(empty($types)){

            #echo("types is empty and you're running:".$hook);

            $types=organic_prototype_obtain_entities_by_connection(
                variable_get('organic_connectivity_prototype_prototype',''),
                'prototypical',
                TRUE
            );
            #echo('<pre>'.print_r($types,TRUE).'</pre>');

            if(count($types)){
                foreach($types as $tid=>$type){
                    // Check to see if anything has already loaded the connections
                    if(!empty($types[$tid]->field_context[LANGUAGE_NONE])){
                        // Otherwise load connection data
                        $types[$tid]->connections=organic_connectivity_extract_connections($type->field_context);
                    }
                }


                foreach($types as $tid=>$type){

                    if(!empty($type->connections)){

                        // Count uses
                        $types[$tid]->typeUses='666';
                        $types[$tid]->typeUses=organic_prototype_obtain_entities_by_connection($type->nid,'prototypical',FALSE);
        #                $types_total_uses+=count($types[$tid]->typeUses);
        #                echo($type->nid.' : '.count($types[$tid]->typeUses).'<br/>');
                        //$types[$tid]->uses = organic_context_obtain_entities_by_type($context->nid);
                        //$types[$tid]->uses = organic_prototype_obtain_entities_by_connection($context->nid,'prototypical',FALSE);

                        foreach($type->connections as $attribute){
                            /// The checkings for TYPE connectivity
                            if($attribute['type']==variable_get('organic_connectivity_prototype_prototype','')){
                                #echo('CONNECTED!');
                                #if(!isset($types[$cid])) echo('<br/>parent:'.$cid.' not set ~ via child '.$tid);
                                #if(!isset($types[$cid]->typeChildren))
                                #    $types[$cid]->typeChildren=array();
                                $types[$attribute['nid']]->typeChildren[$tid]=$tid;
                            }
                            #echo("<br/>\n");
                        }

                    }

                }

                #echo('<pre>'.print_r($types,TRUE).'</pre>');
            }


        }

    }
    /// END TYPE HOOKS


    /// BEGIN SUBJECT HOOKS

    if($hook=='context_layer'||
       $hook=='cloud'||
       $hook=='parent_context_navigation'||
       $hook=='json_contexts'||
       $hook=='attributes_of_node'||
       $hook=='organic_qabalah_needs_you'||
       $hook=='organic_prototype_needs_you'){

        global $subjects;
        global $subjects_total_uses;

        if(empty($subjects)){

            /////////////// OBTAIN SUBJECTS AND BUILD TREE ////////////////

            $subjects=organic_prototype_obtain_entities_by_connection(
                variable_get('organic_connectivity_context_prototype',''),
                'prototypical',
                TRUE
            );

            if(!empty($subjects)){
                /// Replace field_collection crypted IDs with actual results sets
                foreach($subjects as $cid=>$context){
                    //check to see if anything has already loaded the connections
                    if(!empty($subjects[$cid]->field_context[LANGUAGE_NONE])){
                        $subjects[$cid]->connections=organic_connectivity_extract_connections($context->field_context);
                    }
                }


            /// -
            foreach($subjects as $cid=>$context){

                // Count uses
                $subjects[$cid]->uses=organic_prototype_obtain_entities_by_connection($context->nid,'contextual',FALSE);
                $subjects_total_uses+=count($subjects[$cid]->uses);

                /// Set children
                if(!empty($context->connections)){

                    foreach($context->connections as $connection){
                        /// the checkings for categorical connectivity
                        if($connection['type']==variable_get('organic_connectivity_context_prototype','')
                           &&$connection['weight']>=50)
                            $subjects[$connection['nid']]->children[$cid]=$cid;
                    }

                }

            }

            #echo('<pre>'.print_r($subjects,TRUE).'</pre>');

            }

        }


        //////////////////////////// BREAK CONTEXT LIST INTO CONTEXT GROUPS ///////////////////
        if(isset($variables['break_by_user'])&&$variables['break_by_user']==TRUE){
            $variables['contexts_user_breaks']=array();
            foreach($subjects as $iid=>$context){
                $variables['contexts_user_breaks'][$context->uid][]=$context->nid;
            }
            #echo('<pre>'.print_r($variables['contexts_user_breaks'],TRUE).'</pre>');
        }



    }
    if($hook=='parent_context_navigation'&&arg(0)=='node'){
        foreach($nd->connections as $attribute){
            if($attribute['type']==variable_get('organic_connectivity_context_prototype','')){
                if($subjects[$attribute['nid']]->nid!=variable_get('organic_connectivity_context_prototype','')){
                    $nd->contexts_without_context_prototype[]=$attribute;
                }
            }
        }
    }
    //// END SUBJECT HOOKS







    if($hook=='items'||$hook=='syndication'){


        if(isset($_GET['viewer'])) $variables['viewer']=$_GET['viewer'];


        if(isset($variables['show_outer_contexts'])){
            organic_connectivity_preprocess($variables,'itemlist_outer_prototypes_needs_you');
            organic_connectivity_preprocess($variables,'organic_prototype_needs_you');
        }

        //if(isset($variables['show_outer_contexts_notes'])){
            organic_connectivity_preprocess($variables,'organic_prototype_needs_you');
        //}


        if(arg(2)=='boards') organic_connectivity_preprocess($variables,'organic_prototype_needs_you');


        if(isset($variables['by_type'])){
            $variables['childs']=organic_prototype_obtain_entities_by_connection($variables['by_type'],'prototypical',TRUE);
            #echo('<pre>'.print_r($variables['childs']).'</pre>');
        }
        elseif(isset($variables['by_context'])){
            $variables['childs']=organic_prototype_obtain_entities_by_connection($variables['by_context'],'contextual',TRUE);
            #echo('<pre>'.$variables['by_context'].'~~~~'.print_r($variables['childs']).'</pre>');
        }
        elseif(isset($variables['by_attribute'])){
            $variables['childs']=organic_prototype_obtain_entities_by_connection($variables['by_attribute'],'attributional',TRUE);
            #echo('<pre>'.print_r($variables['childs']).'</pre>');
        }
        else{
            $variables['childs']=organic_prototype_obtain_entities_by_connection(null,null,TRUE,$variables['show_unpublished']);
        }


        if(count($variables['childs'])){

            global $subjects;

            #echo('<br/>WE HAVE CHILDZ<br/>');print_r($variables['childs']);

            foreach($variables['childs'] as $iid=>$item)
                $variables['childs'][$iid]->connections=organic_connectivity_extract_connections($item->field_context);


            /////////////////////////////////////// REMOVE EITHER subjects OR NON-subject ITEMS

            if($variables['show_contexts']===0){


                // Remove items exposed as context ((unless the connection weight is under 50))

                foreach($variables['childs'] as $iid=>$child){

                    # if it's a context...
#                    if(!empty($variables['childs'][$iid]->connections)
#                       &&array_key_exists(variable_get('organic_connectivity_context_prototype',''),$variables['childs'][$iid]->connections)){

                        if(isset($variables['by_context'])){
                            // CHECK RECURSIVELY TO SEE IF THEY'RE IN THE PAMPHLET TREE CHAIN
                            if(in_pamphlet($variables['by_context'],$child)){
                                unset($variables['childs'][$iid]);
                                #echo "1 .just unset {$iid},".'<br/>';
                            }
                            #echo "<br/>----------------------------------------------------<br/><br/><br/><br/>";
                        }
                        elseif(isset($variables['by_type'])){
                            // CHECK RECURSIVELY TO SEE IF THEY'RE IN THE PAMPHLET TREE CHAIN
                            if(in_pamphlet($variables['by_type'],$child)){
                                unset($variables['childs'][$iid]);
                                #echo "2 .just unset {$iid},".'<br/>';
                            }
                            #echo "<br/>----------------------------------------------------<br/><br/><br/><br/>";
                        }
                        else{
                            if(isset($subjects[$iid])){
                                unset($variables['childs'][$iid]);
                                #echo "3 .just unset {$iid},".'<br/>';
                            }
                        }

#                    }
                    #echo "<br/>----------------------<br/><br/><br/><br/><br/><br/><br/><br/>";


                }

            }
            elseif($variables['show_contexts']===2){

                // Remove items NOT exposed as context
                #echo('organic_connectivity_context_prototype:'.variable_get('organic_connectivity_context_prototype',''));
                foreach($variables['childs'] as $key=>$child){

                    if(!empty($variables['childs'][$key]->connections)
                       &&!array_key_exists($key,$subjects)){
                        #echo('REMOVING:'.$key.'<br/>');
                        unset($variables['childs'][$key]);
                    }
                    //else $variables['childs'][$key]->connections=organic_connectivity_extract_connections($child->field_context,NULL);
                }

            }


            ///////////////////////////////////////////////////////// Run selected sorting procedure

            if(isset($_GET['sort'])) $variables['ordering']=$_GET['sort'];

            if($variables['ordering']=='created'){
                // Order by creation date
                usort($variables['childs'], function($a, $b){ return $b->created - $a->created; });
            }
            elseif($variables['ordering']=='weight'){
                // Remove items that don't have a set weight
                foreach($variables['childs'] as $nid=>$child) if(empty($child->field_weight)) unset($variables['childs'][$nid]);
                // Order by weight
                usort($variables['childs'], function($a,$b){ return $b->field_weight[LANGUAGE_NONE][0]['value'] - $a->field_weight[LANGUAGE_NONE][0]['value']; });
            }
            elseif($variables['ordering']=='rand'){
                shuffle($variables['childs']);
            }
            elseif($variables['ordering']=='alpha'){
                usort($variables['childs'], function($a, $b){ return $b->title - $a->title; });
            }
            elseif($variables['ordering']=='nid'){
                //usort($variables['childs'], function($a, $b){ return $b->title - $a->title; });
            }


            //////////////////////////////////////////// BREAK ITEM LIST INTO CONTEXT GROUPS ///////////////////////////

            $variables['items_context_breaks']=array();
            if(isset($variables['break_by_contexts'])&&$variables['break_by_contexts']){
                foreach($variables['childs'] as $iid=>$child){
                    $variables['childs'][$iid]->connections=organic_connectivity_extract_connections($child->field_context);
                    $got_added=FALSE;
                    foreach($variables['childs'][$iid]->connections as $icont){
                        if($icont['nid']!=$variables['by_context']){
                            $variables['items_context_breaks'][$icont['nid']][]=$child->nid;
                            $got_added=TRUE;
                        }
                    }
                    if(!$got_added)$variables['items_context_breaks'][0][]=$child->nid; //Add to "Uncategorized"
                }
                #echo('<pre>'.print_r($variables['items_context_breaks'],TRUE).'</pre>');
            }

            ///////////////////////////////////////////////////////// CUT THE ITEM LIST VIA PAGINATION

            //grab the total items before pruning the array
            $variables['total_item_count']=count($variables['childs']);

            //override $perpage if query string is set, otherwise use prior settings in theme config
            if(isset($_GET['perpage'])) $variables['perpage']=$_GET['perpage'];

            if(isset($_GET['page'])
               &&round($_GET['page'])<=ceil($variables['total_item_count']/$variables['perpage'])
               &&round($_GET['page'])>0){

                $variables['page']=round($_GET['page']);
            }
            else $variables['page']=1;

            // calc start and end item #'s
            $startItem=(($variables['page']-1)*$variables['perpage']);
            $endItem=$startItem+($variables['perpage']-1);
            if($endItem>count($variables['childs'])) $endItem=count($variables['childs'])-1;

            //////////////////CLIP BY START AND END ITEM////////////////////////
            //$variables['childs']=array_slice($variables['childs'],$startItem,$endItem,true);
            $i=0;
            foreach($variables['childs'] as $iid=>$child){
                if($i<$startItem||$i>$endItem) unset($variables['childs'][$iid]);
                $i++;
            }
        }


    }//endif($hook='items')



}




function organic_connectivity_intro(){
    /// Incase library sym linking needs to happen
    /*symlink('/homepages/21/d93015512/htdocs/library/organic_connectivity/',
    '/homepages/21/d93015512/htdocs/library/drupal/sites/all/modules/organic_connectivity/lib');*/
    /// Incase subdomain sym linking needs to happen
    /*symlink($_SERVER['DOCUMENT_ROOT'].'/sites/visionarysportsgroup.com',
            $_SERVER['DOCUMENT_ROOT'].'/sites/visionarysports.anoml.net');*/
    /// Incase modules need to be manually deleted
    /*$modules=array(
        'admin_menu',
        'content',
        'default',
        'fieldgroup',
        'filefield',
        'imageapi',
        'imageapi_gd',
        'imagecache',
        'imagecache_ui',
        'imagefield',
        'nodereference',
        'optionwidgets',
    );
    db_delete('system')
        ->condition('name',$modules,'IN')
        ->condition('type','module')
        ->execute();*/
    /// Incase an importance update is needed with the module load ordering
    /*db_query("UPDATE {system} SET weight = 100 WHERE name = 'organic_connectivity'");
    db_query("UPDATE {system} SET weight = 90 WHERE name = 'organic_prototype'");
    db_query("UPDATE {system} SET weight = 80 WHERE name = 'organic_planner'");
    db_query("UPDATE {system} SET weight = 70 WHERE name = 'organic_qabalah'");
    db_query("UPDATE {system} SET weight = 50 WHERE name = 'organic_calendar'");*/
    /// Incase some collection fields need to be programmatically altered
    /*$db_query_children=db_query("SELECT * FROM `node`");
    foreach($db_query_children as $node){
        if($node->nid>0){
            $raw_node=node_load($node->nid);
            $node=entity_metadata_wrapper('node', $raw_node);
            $raw_collection=$node->field_context->value();
            foreach($raw_collection as $item){
                $collection=entity_metadata_wrapper('field_collection_item', $item);
                if($collection->field_weight->value())
                    $v=variable_get('organic_connectivity_context_prototype','');
                elseif($collection->field_response->value())
                    $v=variable_get('organic_connectivity_attribute_prototype','');
                else $v=variable_get('organic_connectivity_prototype_prototype','');
                $collection->field_attribute_type=$v;
                $collection->save();
            }
        }
    }*/
    $viewers_menu_items=menu_tree_all_data('main-menu');
    $viewers_menu_items=menu_tree_output($viewers_menu_items);
    return '<div class="subtitle">organic_connectivity</div>
<p>A platform for the description and display of nodal attributes which connect content nodes.</p>
<h3>More info</h3>
<div>
 <a href="http://connectivity.orgnsm.org">http://connectivity.orgnsm.org</a><br/>
 <a href="http://github.com/ixias/organic-connectivity">http://github.com/ixias/organic-connectivity</a>
</div>'.drupal_render($viewers_menu_items);
}




function organic_connectivity_config_page(){
    $form=array();
    $form['organic_connectivity_attribute_prototype']=array(
        '#type'=>'textfield',
        '#title'=>t('The ID of the node that defines a node attribute, a TYPE of connection'),
        '#default_value'=>variable_get('organic_connectivity_attribute_prototype',''),
        '#description'=>t('This allows you to setup node ATTRIBUTES (by connecting them to this node)'),
        '#required'=>FALSE,
    );
    /*$form['organic_connectivity_attributes_restrict_to_users'] = array(
        '#type' => 'textfield',
        '#title' => t('Restrict access to attributes to a list of users'),
        '#default_value' => variable_get('organic_connectivity_attributes_restrict_to_users',''),
        '#description' => t('Add comma separated users to give access to items (to restrict attributes to the person that created them use [creator])'),
        '#required' => FALSE,
    );*/
    $form['organic_connectivity_prototype_prototype']=array(
        '#type'=>'textfield',
        '#title'=>t('The ID of the node that defines a node prototype'),
        '#default_value'=>variable_get('organic_connectivity_prototype_prototype',''),
        '#description'=>t('This allows you to setup node PROTOTYPES, like:<br/>
                             Sephiroth<br/>
                             Path -is connector of sephiroth - should this be connector prototype instead of 33?<br/>
                             Subject<br/>
                             Image<br/>
                             Screenshot<br/>
                             Text<br/>
                             Discipline<br/>
                             Book<br/>
                             Person<br/>
                             Bioform<br/>
                             Project<br/>
                             Task<br/>
                             Connector<br/>
                             (by connecting them to this node)'),
        '#required'=>FALSE,
    );
    $form['organic_connectivity_journal_prototype']=array(
        '#type'=>'textfield',
        '#title'=>t('The ID of the node that defines the JOURNAL node type'),
        '#default_value'=>variable_get('organic_connectivity_journal_prototype',''),
        '#description'=>t('This allows you to setup JOURNAL nodes (by connecting them to this node)'),
        '#required'=>FALSE,
    );

    $form['organic_connectivity_context_prototype']=array(
        '#type'=>'textfield',
        '#title'=>t('The ID of the node that defines a node subject/topic/category'),
        '#default_value'=>variable_get('organic_connectivity_context_prototype',''),
        '#description'=>t('This allows you to create SUBJECT nodes (by connecting them to this node prototypically)'),
        '#required'=>FALSE,
    );
    $form['organic_context_categories_restrict_to_users']=array(
        '#type'=>'textfield',
        '#title'=>t('Restrict access to categories lists to a list of users'),
        '#default_value'=>variable_get('organic_context_categories_restrict_to_users',''),
        '#description'=>t('Add comma separated users to give access to items (to restrict categories to the person that created them use [creator])'),
        '#required'=>FALSE,
    );


    $form['organic_context_items_restrict_to_users'] = array(
        '#type' => 'textfield',
        '#title' => t('Restrict access to items lists to a list of users'),
        '#default_value' => variable_get('organic_context_items_restrict_to_users',''),
        '#description' => t('Add comma separated users to give access to items (to restrict items to the person that created them use [creator])'),
        '#required' => FALSE,
    );


    return system_settings_form($form);

}







function organic_connectivity_build_form(){
    drupal_set_title('Add Thing');
    // get the standard node form;
    // we cannot get it from drupal_get_form() because we need the form_state reference,
    // so we copy a bit of code from node_add() and drupal_get_form()
    global $user;
    $form_state = array();
    $form_state['build_info']['args'][] = (object) array(
        'uid' => $user->uid,
        'name' => (isset($user->name) ? $user->name : ''),
        'type' => 'thing',
        'language' => LANGUAGE_NONE,
    );
    $form = drupal_build_form('thing_node_form', $form_state);
    // we now have exactly the form which node_add() is returning BUT
    // we also have a reference of the form state array ready to alter;
    // how many items do we want?
    $num_items = 5;
    // this is exactly what the ajax request for the add more button does
    $form_state['field']['context'][LANGUAGE_NONE]['items_count']=$num_items;
    // now this is important!! set a flag inside the form state so that the hook_form_alter() function
    // is able to know when it should pre-populate (remember: hook_form_alter() will be called twice
    // during this process)
    #$form_state['organic_context_prepopulate'] = TRUE;
    // reset the html ids so that our new rebuilted form will get nice ids and not form_id--2
    drupal_static_reset('drupal_html_id');
    // rebuild the form and return it;
    // through drupal_rebuild_form() hook_form_alter() will be called again - this time with our
    // prepopulate flag and 5 empty form elements ready to prefill
    return drupal_rebuild_form($form_state['build_info']['form_id'], $form_state, $form);
}







///////// adds subjects to selectors in node edit forms /////////

module_load_include('inc','node','node.pages');

function organic_connectivity_form_alter(&$form,&$form_state,$form_id){

    if($form_id=='thing_node_form'){

        /*if( isset($form_state['organic_context_prepopulate']) && $form_state['organic_context_prepopulate'] ){
            $delta = 0;
            $max_delta = $form['--machine-name-of-field--'][LANGUAGE_NONE]['#max_delta'];
            while ($delta <= $max_delta) {
                // prepopulate whatever you like with help of #default_value'
                $form['--machine-name-of-field--'][LANGUAGE_NONE][$delta]['#default_value'] = 'Value to show';
                $delta++;
            }
        }*/
//        print_r($form_state);
        global $subjects;
        #$form['field_context'][LANGUAGE_NONE][0]['field_connection'][LANGUAGE_NONE]['#options']['_none'] = '- None -';
        #$form['field_context'][LANGUAGE_NONE][0]['field_connection'][LANGUAGE_NONE]['#options']=array(
        #    '_none'=>'- None -',
        #);
        /*for($i=0;$i<count($form['field_context'][LANGUAGE_NONE]);$i++){
            if(isset($form['field_context'][LANGUAGE_NONE][$i])){
                foreach($subjects as $context){
                    $form['field_context'][LANGUAGE_NONE][$i]['field_connection'][LANGUAGE_NONE]['#options'][$context->nid] = $context->title;
                }
            }
        }*/
    }
}








function organic_prototype_obtain_entities_by_connection_3($connectionQuery=FALSE){

    $query=new EntityFieldQuery();

    $query->entityCondition('entity_type','node')
          ->entityCondition('bundle','thing')
          ->propertyCondition('status',1);

    //$query->fieldCondition('field_connection', 'nid', $connectionQuery);
    $results = $query->execute();
    if(array_key_exists('node',$results))
        $results = entity_load('node',array_keys($results['node']));


    // Optional context filter              ----------- way to speed this up?
    if($connectionQuery){
        $itemz = array();
        foreach($results as $item){
            if(!empty($item->field_context)){
                foreach($item->field_context[LANGUAGE_NONE] as $context_id){
                    $context_set = entity_load('field_collection_item',array($context_id['value']));
                    if(!empty($context_set[$context_id['value']]->field_connection)
                    &&$context_set[$context_id['value']]->field_connection[LANGUAGE_NONE][0]['target_id']==$connectionQuery)
                        $itemz[] = $item;
                }
            }
        }
        $results = array_values($itemz);
        $itemz = NULL;
    }

    return $results;

}




function organic_prototype_obtain_entities_by_connection_2($connectionQuery=FALSE){

    $inner=new EntityFieldQuery();

    $inner_r=$inner->entityCondition('entity_type','field_collection_item')
                   ->fieldCondition('field_connection','target_id',$connectionQuery,'=')
                     ///drupal limitation: check for NULL does not work
                     #->fieldCondition('field_weight','value',NULL,'IS NULL')
                     #->fieldCondition('field_weight','value',0,'=')
                   ->execute();

    if(!empty($inner_r['field_collection_item'])){
        $keys = array_keys($inner_r['field_collection_item']);
        $query = new EntityFieldQuery();
        $species_r = $query->entityCondition('entity_type','node')
//                      ->entityCondition('bundle',self::$bundle)
                      ->fieldCondition('field_connection','value',$keys)
                      ->execute();
        if(!empty($species_r['node'])){
            return node_load_multiple(array_keys($species_r['node']));
        }
    }

}




function organic_prototype_obtain_entities_by_connection($connectionQuery=NULL,$connectionType=NULL,$loadNodes=FALSE,$unpub=0){


    //if(!db_table_exists('n')) return;


    #timer_start('db_select');
    $query=db_select('node','n');
    $query->fields('n',array('nid','uid','status','created','title'));

    if($unpub===2) $query->condition('status',0,'=');
    elseif($unpub===0) $query->condition('status',0,'>');


    // The field collection group:
    $query->leftJoin('field_data_field_context','fcs','fcs.entity_id=n.nid');

    $query->leftJoin('field_data_field_attribute_type','fdfattr','fdfattr.entity_id=fcs.field_context_value');
    $query->leftJoin('field_data_field_connection','fdfcon','fdfcon.entity_id=fcs.field_context_value');
    //$query->leftJoin('field_data_field_weight','fdfwei','fdfwei.entity_id=fcs.field_context_value');
    //$query->leftJoin('field_data_field_response','fdfres','fdfres.entity_id=fcs.field_context_value');
    $query->fields('fdfattr');
    $query->fields('fdfcon');
    //$query->fields('fdfwei');
    //$query->fields('fdfres');

    ////// SET CONNECTION CONDITIONS //////

    if(isset($connectionQuery)){
        $query->condition('field_connection_target_id',$connectionQuery);
        if($connectionType=='prototypical'){
            $query->condition('field_attribute_type_target_id',variable_get('organic_connectivity_prototype_prototype',''));
        }
        elseif($connectionType=='contextual'){
            $query->condition('field_attribute_type_target_id',variable_get('organic_connectivity_context_prototype',''));
            //// these are checked while adding children... need for ITEMS queries?
        }
        elseif($connectionType=='attributional'){
            $query->condition('field_attribute_type_target_id',variable_get('organic_connectivity_attribute_prototype',''));
        }
    }

    $query->orderBy('nid');
    //$query->distinct();
    $results=$query->execute();
    #debug(timer_read('db_select').' ms ~ '.$connectionQuery);

    //echo('<h3>Results for '.$connectionQuery.' via '.$connectionType.'</h3>');
    //if(isset($results)) foreach($results as $result) echo($result->nid);

    //Build NID array
    foreach($results as $result) $nids[]=$result->nid;

    //Rerturn NID array with or without fully-loaded node data
    if(isset($nids)){
        if($loadNodes) return node_load_multiple($nids);
        else return $nids;
    }


    /*$rezultz=array();
    foreach($results as $result){

        $rezultz[$result->nid]['nid']=$result->nid;
        $rezultz[$result->nid]['title']=$result->title;

        $rezultz[$result->nid]['connections']=organic_connectivity_extract_connections(&$context_field,$remove=NULL,$load_nodes=FALSE)

        / *$rezultz[$result->nid]['connections'][$result->field_connection_target_id]=array(
            'nid'=>$result->field_connection_target_id,
            'weight'=>$result->field_weight_value,
            'response'=>$result->field_response_value,
        );* /

    }
    echo('<pre>'.print_r($rezultz,TRUE).'</pre>');
    return $rezultz;*/

}






/////////////// field collection pullin': //////////////////////


function organic_connectivity_extract_connections(&$context_field,$remove=NULL){//,$load_nodes=FALSE

    $node_attributes=array();

    if(!empty($context_field[LANGUAGE_NONE])){
        foreach($context_field[LANGUAGE_NONE] as $attribute){

            ///// Get the collection set
            $context_collection_set=entity_load('field_collection_item',array($attribute['value']));

            ///// Get the collection category weight
            if(!empty($context_collection_set[$attribute['value']]->field_weight))
                $context_weight=$context_collection_set[$attribute['value']]->field_weight[LANGUAGE_NONE][0]['value'];
            else $context_weight='';

            ///// Get the collection attribute response
            if(!empty($context_collection_set[$attribute['value']]->field_response))
                $context_response=$context_collection_set[$attribute['value']]->field_response[LANGUAGE_NONE][0]['value'];
            else $context_response='';

            ///// Get the collection attribute type
            if(!empty($context_collection_set[$attribute['value']]->field_attribute_type))
                $context_type=$context_collection_set[$attribute['value']]->field_attribute_type[LANGUAGE_NONE][0]['target_id'];
            else $context_type='';

            ///// Get the collection category notes
            if(!empty($context_collection_set[$attribute['value']]->field_notes))
                $context_notes=$context_collection_set[$attribute['value']]->field_notes[LANGUAGE_NONE][0]['value'];
            else $context_notes='';

            ///// Get the collection connection nid
            if(!empty($context_collection_set[$attribute['value']]->field_connection)){

                $context_nid=$context_collection_set[$attribute['value']]->field_connection[LANGUAGE_NONE][0]['target_id'];

                //if($remove){
                    if($context_nid!=$remove){

                        $node_attributes[$attribute['value']]=array(
                            'type'=>$context_type,
                            'nid'=>$context_nid,
                            'weight'=>$context_weight,
                            'response'=>$context_response,
                            'notes'=>$context_notes,
                        );

                        //if($load_nodes)
                            //$node_attributes[$attribute['value']]['content']=node_load($context_nid);

                    }
                //}

            }



        }
    }
    //print_r($node_attributes);
    return $node_attributes;

}










function print_context_level($group,$image_style,$mine_children,$show_random_child,$parent,$show_nid){

    global $subjects;

    echo('                <ul>');

    foreach($group as $cid=>$details){

        $item_go=TRUE;#if( ((!$context||$context==21) && $subjects[$cid]->isInRootButHasOtherParent) && $cid!=1) $item_go=FALSE;

        #echo($context.'~~~'.$cid.'~~'.$subjects[$cid]->isInRootButHasOtherParent.'<br/>');

        if($item_go):

            $classes = 'nav-'.$subjects[$cid]->nid;

            ##########################################################################################
            ##########################################################################################
            ##########################################################################################
            /////////////// use weights to determine the selections............./////////////////////
            if($subjects[$cid]->nid==arg(1)) $classes.=' active';
            ##########################################################################################
            //elseif( $details->nid == $node_contexts[0] ) $return .= '<li class="touch">\n';
            //elseif( in_array( $details->nid, $node_contexts ) ) $return .= '<li class="touch">\n';
            //elseif( in_array( $details->nid, $node_themes ) ) $return .= '<li class="thematique">\n';
            ##########################################################################################
            ##########################################################################################
            ##########################################################################################

            echo('                    <li class="'.$classes.'">');

            echo('                        <a href="/'.drupal_get_path_alias('node/'.$subjects[$cid]->nid).'">');




if($show_random_child){

    echo('<span class="children-of-context-in-tree">');

    if(isset($subjects[$cid]->uses)&&count($subjects[$cid]->uses)){

        for($i=0;$i<$show_random_child;$i++){

            #print_r($subjects[$cid]->uses);
            $random_key=array_rand($subjects[$cid]->uses,1);
            #echo($random_key);
            $nd_rndm_child=node_load($subjects[$cid]->uses[$random_key]);
            #print_r($nd_rndm_child);

            if(!empty($nd_rndm_child->field_images)){

                echo('    <img src="'.image_style_url('thumbnail',$nd_rndm_child->field_images[LANGUAGE_NONE][0]['uri']).'" alt="" style="height:50px;"/>');

            }
        }
    }
    echo('</span>');

}





if(!empty($subjects[$cid]->field_images)):
echo('                            <img src="'.image_style_url($image_style,$subjects[$cid]->field_images[LANGUAGE_NONE][0]['uri']).'" alt=""/>');
endif;

if($show_nid) echo('<span class="numerological">'.$cid.'</span>');

echo('                            <span class="title">'.$subjects[$cid]->title.'</span>');

if(!empty($subjects[$cid]->field_subtitle)):
    echo('                            <span class="subtitle">'.$subjects[$cid]->field_subtitle[LANGUAGE_NONE][0]["value"].'</span>');
endif;

if($mine_children&&isset($subjects[$cid]->uses)&&count($subjects[$cid]->uses)>0):
    echo('                            <span class="details">'.count($subjects[$cid]->uses).'</span>');
endif;


echo('                        </a>');



////// RECUR ////////

if(!empty($subjects[$cid]->children)&&$cid!=$parent){

    print_context_level($subjects[$cid]->children,$image_style,$mine_children,$show_random_child,$cid,$show_nid);

    /*echo(
        theme(
            'context_layer',
            array(
                'context'=>$cid,
                'image_style'=>$image_style,
                'mine_children'=>$mine_children,
                'show_random_child'=>$show_random_child,
                'parent'=>$cid,
                'show_nid'=>$show_nid,
            )
        )
    );*/

}

echo('                    </li>');

endif;
}
echo('                </ul>');


    #}


} //end print_context_level function declaration











function dumpdaitemmang($item,$image_size,$show_children,$show_random_child,$by_context,$show_multi_image,$by_type,$show_date,$show_outer_contexts){ ?>



<?php #if(!empty($item->field_context)&&$by_context&&!empty($item->field_context[$by_context])){ ?>

<?php #if($item->field_context[$by_context]['weight']<=35){ ?>
        <!--li class="importance-small"-->
<?php #}elseif($item->field_context[$by_context]['weight']>35&&$item->field_context[$by_context]['weight']<=65){ ?>
        <!--li class="importance-medium"-->
<?php #}elseif($item->field_context[$by_context]['weight']>65&&$item->field_context[$by_context]['weight']<=100){ ?>
        <!--li class="importance-large"-->
<?php #} ?>


<?php #}elseif($item->nid==arg(1)){ ?>
        <!--li class="selected"-->
<?php #}else{ ?>
        <li>
<?php #} ?>



            <a href="/<?php echo(drupal_get_path_alias('node/'.$item->nid)); ?>">


                <span class="title"><?php echo($item->title); ?></span>


<?php if(!empty($item->field_subtitle)): ?>
                <span class="subtitle"><?php echo($item->field_subtitle[LANGUAGE_NONE][0]['value']); ?></span>
<?php endif; ?>




<?php //                SHOW ITEM (IMAGE(S))              // ?>

<?php if(!empty($item->field_images)): ?>


<span class="imagery"><img src="<?php echo(image_style_url($image_size,$item->field_images[LANGUAGE_NONE][0]["uri"])); ?>" alt=""/></span>


<?php if($show_multi_image&&count($item->field_images[LANGUAGE_NONE])>1): ?>
<span class="sub_imagery">
<?php for($y=1;$y<count($item->field_images[LANGUAGE_NONE]);$y++){ ?>
<?php if($y<7): ?>
<img src="<?php echo(image_style_url($image_size,$item->field_images[LANGUAGE_NONE][$y]["uri"])); ?>" alt=""/>
<?php endif; ?>
<?php } ?>
</span>
<?php endif; ?>



<?php elseif(!empty($item->body[LANGUAGE_NONE])): ?>

<?php
$test = strip_tags($item->body[LANGUAGE_NONE][0]['value']);
$test = substr($test,0,225);
?>
                <span class="body"><?php echo($test); ?>...</span>
<?php endif; ?>


<?php //            end:SHOW ITEM (IMAGE(S))              // ?>







<?php if($show_random_child): ?>
<span class="recent-example-children">
<?php
global $subjects;
if(isset($subjects[$item->nid])&&count($subjects[$item->nid]->uses)){

    if(count($subjects[$item->nid]->uses)<$show_random_child) $show_random_child=count($subjects[$item->nid]->uses);
//print_r($subjects[$item->nid]->uses);
    for($i=0;$i<$show_random_child;$i++){

        ////////////////////////////////////////////$random_key=array_rand($subjects[$item->nid]->uses,1);
        $rndmchildcontent=node_load($subjects[$item->nid]->uses[$i]);
        //echo($rndmchildcontent->title);
?>

<? if(!empty($rndmchildcontent->field_images)): ?>
    <img src="<?php echo(image_style_url($image_size,$rndmchildcontent->field_images[LANGUAGE_NONE][0]['uri'])); ?>" alt=""/>
<?php else: ?>
<? if(!empty($rndmchildcontent->body[LANGUAGE_NONE][0]['value'])){ ?>
<?php
$tteesstt=strip_tags($rndmchildcontent->body[LANGUAGE_NONE][0]['value']);
$tteesstt=substr($tteesstt,0,225);
?>
    <span class="body"><?php echo($tteesstt); ?>...</span>
<?php } ?>
<?php endif; ?>

<?php
    }
}
?>
</span>
<?php endif; ?>








<?php if(!empty($item->connections)&&$show_outer_contexts){ ?>


<?php global $types; global $subjects; ?>


                <span class="details">

<?php foreach($item->connections as $item_context){ ?>



<?php if(isset($types[$item_context['nid']])): ?>

                <span class="outer-prototypes<?php if(isset($by_type)&&$item_context['nid']==$by_type): ?> selected<?php endif; ?>">

                    <?php if(!empty($types[$item_context['nid']]->field_images[LANGUAGE_NONE])): ?>
                        <img src="<?php echo(image_style_url('thumbnail',$types[$item_context['nid']]->field_images[LANGUAGE_NONE][0]['uri'])); ?>" alt=""/>
                        <?php endif; ?>
                        <span class="title"><?php echo($types[$item_context['nid']]->title); ?></span>
            </span>


<?php elseif(isset($subjects[$item_context['nid']])): ?>

                <span class="outer-contexts<?php if(isset($by_context)&&$item_context['nid']==$by_context): ?> selected<?php endif; ?>">

                    <?php if(!empty($subjects[$item_context['nid']]->field_images[LANGUAGE_NONE])): ?>
                        <img src="<?php echo(image_style_url('thumbnail',$subjects[$item_context['nid']]->field_images[LANGUAGE_NONE][0]['uri'])); ?>" alt=""/>
                        <?php endif; ?>
                        <span class="title"><?php echo($subjects[$item_context['nid']]->title); ?></span>

            </span>

<?php endif; ?>

<?php } ?>

                </span>
<?php } ?>





<?php
//if(isset($variables['show_outer_contexts_notes'])){
    global $subjects;
    global $nd;
?>
<?php if(isset($nd->nid)&&isset($subjects[$nd->nid])): ?>
<?php if($notes_key=search_for_attribute(variable_get('organic_connectivity_context_prototype',''),$nd->nid,$item->connections)){ ?>
<strong><?php echo($item->connections[$notes_key]['notes']); ?></strong>
<?php } ?>
<?php endif; ?>
<?php
//}
?>






<?php if($show_date): ?>
<span class="date"><?php echo(date($show_date,$item->created)); ?></span>
<?php endif; ?>






<?php if($show_children){ ?>

<?php global $subjects; global $types; ?>

<?php if(isset($subjects[$item->nid])): ?>
<span class="children-count"><?php echo(count($subjects[$item->nid]->uses)); ?></span>
<?php endif; ?>

<?php if(isset($types[$item->nid])): ?>
<span class="children-count-prototypical"><?php echo(count($types[$item->nid]->typeUses)); ?></span>
<?php endif; ?>

<?php } ?>




<?php
    # Show children subjects
    #echo(print_r($subjects[$item->nid]->children));
?>




            </a>
        </li>
<?php }   ///////////// END dumpdaitemmang ///////////////////












function search_for_attribute($attribute_type,$attribute,&$attributes){
    foreach($attributes as $key=>$val)
        if($val['type']==$attribute_type&&$val['nid']==$attribute)
            return $key;
    return false;
}





function in_pamphlet($context,$child){

    global $subjects;

    #echo('<h4>Checking: '.$subjects[$context]->title.', for:'.$child->title.'</h4>');

    if(isset($subjects[$context]->children)){

        if(in_array($child->nid,$subjects[$context]->children)){

            #echo('<h5>FOUND IN ARRAY, searching'.variable_get('organic_connectivity_context_prototype','').', '.$child->nid.'....</h5>');

            $key=search_for_attribute(
                     variable_get('organic_connectivity_context_prototype',''),
                     $context,
                     $child->connections);

            #echo('<h6>FOUND KEY: '.$key.' '.$child->title.' in '.$context.' via '.variable_get('organic_connectivity_context_prototype','').'<pre>'.print_r($child->connections,TRUE).'</pre></h6>');

            if($child->connections[$key]['weight']>=50) return TRUE;

        }
        else {

            #print_r($subjects[$context]->children);echo('<br/>');

            foreach($subjects[$context]->children as $child_context){

                #echo("<h3>Couldn't find ".$child->title." in this level (".$subjects[$context]->title."), about to dive into: ".$subjects[$child_context]->title."</h3>");

                if(in_pamphlet($child_context,$child)) return TRUE;

            }

        }
    }#else echo "no children<br/>";
    return FALSE;

}





/*function organic_prototype_add_children_entities($query_nid,$filter=NULL){


    echo('<div style="padding-left:25px;"><h2><a>You are getting children connected to:'.$query_nid.'</a></h2>');


    /// Special Cases for other connectors (modules) to quickly grab their data as well ///

    if($query_nid==variable_get('organic_connectivity_connection_prototype','')){
        global $connectors;
        $connectors=organic_prototype_add_children_entities($query_nid,'connector');
        #return;
    }
    else*//*if($query_nid==variable_get('organic_connectivity_context_prototype','')&&$filter!='context'){
        echo "<h3 style='color:green;'>trying to set subjects via:".$query_nid.'</h3><br/>';
        global $subjects;
        $subjects=organic_prototype_add_children_entities($query_nid,'context');
        #return;
    }
    elseif($query_nid==variable_get('organic_connectivity_attribute_prototype','')&&$filter!='attribute'){
        global $attributes;
        echo "<h3 style='color:green;'>trying to set attributes via:".$query_nid.'</h3><br/>';
        $attributes=organic_prototype_add_children_entities($query_nid,'attribute');
        #return;
    }

    $kids=organic_prototype_obtain_entities_by_connection($query_nid);


    if(!empty($kids)){


        $kids_to_add=array();////need this so we aren't altering $types while looping through it
        echo('<pre>');print_r(array_keys($kids));echo('</pre>');


        foreach($kids as $kID=>$child){

            echo('You are processing child:'.$kID.' of parent:'.$query_nid.'<br/>');

            //$kids[$kID]['connections']=organic_connectivity_extract_connections($child->field_context);

            if($filter=='type'){
                ############if they have no weight and no note then add children to master types array
                if($kids[$kID]['connections'][$query_nid]['weight']==0){
                    echo('Kept:'.$kID.' bcs it\'s connected properly as TYPE<br/>');
                    echo('RECURSION:'.$kID.'<br/>');
                    $kids_to_add[$kID]=$child;
                    if($kID!=variable_get('organic_connectivity_prototype_prototype','')&&$kID!=$query_nid){
#                        $test=organic_prototype_add_children_entities($kID,$filter);
                        if(!empty($kids_to_add)&&!empty($test))$kids_to_add=$kids_to_add+$test;
                        elseif(!empty($test))$kids_to_add=$test;
                    }
                }else{
                    echo('::Threw out:'.$kID.' bcs it\'s not connected like a TYPE needs to be::<br/>');
                    #unset($kids[$kID]);
                }
            }
            elseif($filter=='context'){
                ############if they have weight and no note then add children to master subjects array
                if(!isset($kids[$kID]['connections'][1])||$kids[$kID]['connections'][1]['weight']!=0){
                    echo('Threw out:'.$kID.' bcs it\'s not connected like a CONTEXT needs to be<br/>');
                    unset($kids[$kID]);
                }else{
                    echo('Kept:'.$kID.' bcs it\'s connected properly as CONTEXT<br/>');
                    echo('RECURSION:'.$kID.'<br/>');
                }
                if($kID!=variable_get('organic_connectivity_context_prototype','')
                     &&$kID!=variable_get('organic_connectivity_prototype_prototype','')){
                    $test=organic_prototype_add_children_entities($kID,$filter);
                    if(!empty($kids_to_add)&&!empty($test))$kids_to_add=$kids_to_add+$test;
                    elseif(!empty($test))$kids_to_add=$test;
                }
            }
            elseif($filter=='attribute'){
                ############if they have no weight and a note then add children to master attributes array
                if($kids[$kID]['connections'][1]['weight']!=0){
                    echo('Threw out:'.$kID.' bcs it\'s not connected like an ATTRIBUTE needs to be<br/>');
                    unset($kids[$kID]);
                }else{
                    echo('Kept:'.$kID.' bcs it\'s connected properly as ATTRIBUTE<br/>');
                    echo('RECURSION:'.$kID.'<br/>');
                }
                if($kID!=variable_get('organic_connectivity_context_prototype','')
                     &&$kID!=variable_get('organic_connectivity_prototype_prototype','')
                     &&$kID!=variable_get('organic_connectivity_attribute_prototype','')){
                    $test=organic_prototype_add_children_entities($kID,$filter);
                    if(!empty($kids_to_add)&&!empty($test))$kids_to_add=$kids_to_add+$test;
                    elseif(!empty($test))$kids_to_add=$test;
                }
            }
        }

        foreach($kids_to_add as $ktaid=>$kid_to_add){
            $kids[$query_nid]->children[$ktaid]=$ktaid;
        }

//        if(!empty($kids_to_add)&&!empty($kids))$kids=$kids+$kids_to_add;


    }
    echo('</div>(((RETURNING on '.$query_nid.')))<hr/>');
    return $kids;
}*/







function organic_prototype_numeric_list(){

    $sql_children="SELECT node.nid AS nid,
       node.vid AS node_vid,
       node.title AS node_title
     FROM node node";

    $db_query_children=db_query($sql_children);

    echo("<ul>\n");
    foreach($db_query_children as $row){
    	$nd=node_load($row->nid);
    	echo("<li style=\"display:inline;font-size:250%;padding:.5em;\">\n");
    	if(isset($nd->path)) echo("<a href=\"/".$nd->path."\">\n");
    	else echo("<a href=\"/node/".$row->nid."\">\n");
    	echo("<span class=\"number\">".$row->nid."</span>\n");
    	echo("</a>\n");
    	echo("</li>\n");
    }
    echo("</ul>\n\n");

}





///////////////////    The templates for the JSON feeds for infovis are below here: ////




function organic_connectivity_json_hierarchical(){

    global $subjects;
    if(empty($subjects)){
        $variables=array();
        organic_connectivity_preprocess($variables,'json_contexts');
    }

    $arr=array();
    foreach($subjects as $nid=>$context){

        $arrr['name']=$context->nid;
        $arrr['title']=$context->title;
        $arrr['size']=count($context->uses);
        $arrr['imports']=array();

        if(isset($context->children)){
            foreach($context->children as $nid_child=>$context_child){
                //if($context_child['weight']>=50){
                   array_push($arrr['imports'],$nid_child);
                //}
            }
        }

        array_push($arr,$arrr);

    }

    return $arr;

}






function organic_connectivity_json_ForceDirected(){

    global $subjects;
    if(empty($subjects)){
        $variables=array();
        organic_connectivity_preprocess($variables,'json_contexts');
    }

    $arr=array(
        'nodes'=>array(),
        'links'=>array(),
    );

    //$hold_up=array();
    foreach($subjects as $nid=>$context){

        $arrr=array(
            'name'=>$context->title,
            'group'=>rand(1,7),
            //'group'=>count($context->uses),
            'arraySpot'=>count($arr['nodes']),
            'id'=>$context->nid,
        );

        //$hold_up[$context->nid]=
        array_push($arr['nodes'],$arrr)-1;

    }





    foreach($subjects as $nid=>$context){

        if(isset($context->children)){
            foreach($context->children as $nid_child=>$context_child){

                $weight_key=search_for_attribute(variable_get('organic_connectivity_context_prototype',''),$nid,$subjects[$nid_child]->connections);

                $arrr=array(
                   'source'=>$nid,
                   'target'=>$nid_child,
                   'value'=>ceil($subjects[$nid_child]->connections[$weight_key]['weight']/20)+1,
                );

                array_push($arr['links'],$arrr);

            }
        }

    }

    return $arr;

}




function organic_connectivity_json_sunburst_d3(){
    global $subjects;
    if(empty($subjects)){
        $variables=array();
        organic_connectivity_preprocess($variables,'json_contexts');
    }
    $arr=organic_context_json_contexts_sunburst_d3_child_adder(
            $subjects,
            1
//            variable_get('organic_connectivity_context_prototype','')
    );
    return $arr;
}




function organic_connectivity_json_Sunburst(){

    $variables=array();
    organic_connectivity_preprocess($variables,'json_contexts');

    global $subjects;
    global $subjects_total_uses;
    $JSON_SUNBURST=array();


    foreach($subjects as $nid=>$context){

        //////////////////////////////////////////////////////////////////////////////////////////////////////////// This is actually incorrect because
        //////////////////////////////////////////////////////////////////////////////////////////////////////////// here percentage should be calculated
        //////////////////////////////////////////////////////////////////////////////////////////////////////////// depending on which level of the burst
        //////////////////////////////////////////////////////////////////////////////////////////////////////////// we are currently on.
        if(isset($context->uses)) $percentage=round((count($context->uses)/$subjects_total_uses)*100);
        if($percentage==0) $percentage=1;////Fix for auto heights


        $arrr=array();
        $arrr['id'] = 'node'.$nid;
        $arrr['name'] = $context->nid.') '.$context->title.'_'.$percentage.'%';



        if($nid!=1){
            $arrr['data'] = array(
                '$angularWidth' => $percentage,
                '$color' => '#'.rand(0,9).rand(0,9).rand(0,9),
                '$height' => ($percentage*30),
            );
        } else {
            $arrr['data'] = array(
                '$type' => 'none',
            );
        }



        $arrr['adjacencies']=array();
        if(isset($context->children)){
            foreach($context->children as $nid_child=>$context_child){

        if($nid!=1){
                $arrrr=array(
                   'nodeTo' => 'node'.$nid_child,
                   'data' => array(
                       '$color' => '#ccffdd',
                       '$lineWidth' => ($subjects[$nid_child]->connections[$nid]['weight']/35),
                   )
                );
        }
        else{
                $arrrr=array(
                   'nodeTo' => 'node'.$nid_child,
                   'data' => array(
                       '$type' => 'none',
                   )
                );
        }
                array_push($arrr['adjacencies'],$arrrr);
            }
        }





        array_push($JSON_SUNBURST,$arrr);


    }


    return $JSON_SUNBURST;

}















function organic_connectivity_json_Sunburst_flat(){

    global $subjects;
    if(empty($subjects)){
        $variables=array();
        organic_connectivity_preprocess($variables,'json_contexts');
    }



    $JSON_SUNBURST=array();

    ///////////////////////// begin: ADD NODE ZERO
    $arrr=array();
    $arrr['id'] = 'node0';
    $arrr['name'] = '';
    $arrr['data'] = array('$type'=>'none');
    $arrrr=array();
    foreach($subjects as $nid=>$context){
        $arrrr[]=array(
            'nodeTo'=>'node'.$context->nid,
            'data'=>array(
                '$type'=>'none',
            ),
        );
    }
    $arrr['adjacencies'] = $arrrr;
    array_push($JSON_SUNBURST,$arrr);
    ///////////////////////// end: ADD NODE ZERO



    global $subjects_total_uses;
    //$processedNodesTracker=array();

    foreach($subjects as $nid=>$context){



        if(isset($context->uses)) $percentage=round((count($context->uses)/$subjects_total_uses)*100);

        if($percentage==0) $percentage=1;////Fix for auto heights

        $arrr=array();
        $arrr['id']='node'.$nid;
        $arrr['name'] = $context->nid.') '.$context->title.'_'.$percentage.'%';

        $arrr['data'] = array(
            '$angularWidth' => $percentage,
            '$color' => '#'.rand(0,9).rand(0,9).rand(0,9),
            '$height' => ($percentage*30),
        );


        $arrr['adjacencies']=array();
        if(isset($context->children)){
            foreach($context->children as $nid_child=>$context_child){

//if(!in_array($processedNodesTracker,$nid_child)){
                    $arrrr=array(
                       'nodeTo' => 'node'.$nid_child,
                       'data' => array(
                           '$color' => '#ccffdd',
                           '$lineWidth' => ($subjects[$nid_child]->connections[$nid]['weight']/35),
                       )
                    );
//} else {
                    //$arrrr='node'.$nid_child;
//}

                array_push($arrr['adjacencies'],$arrrr);

//$processedNodesTracker[]=$nid_child;

            }
        }

        array_push($JSON_SUNBURST,$arrr);

    }

    return $JSON_SUNBURST;

}




?>